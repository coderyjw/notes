# 1. 题目
给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。

你可以假设数组是非空的，并且给定的数组总是存在多数元素。

**示例 1：**

```
输入： [3,2,3]
输出： 3
```

**示例 2：**

```
输入： [2,2,1,1,1,2,2]
输出： 2
```

# 2. 解一：哈希表
用一个数组来存储每个元素以及出现的次数，当次数大于一半时返回
```javascript
/**
 * @param {number[]} nums
 * @return {number}
 */
 var majorityElement = function(nums) {
  const a = []
  const n = nums.length >> 1
  for(let index in nums) {
    a[nums[index]] = a[nums[index]] !== undefined ? ++a[nums[index]] : 1
    if(a[nums[index]] > n) {
      return nums[index]
    }
  }
};

```
**复杂度分析**

- 时间复杂度: O(n)
- 空间复杂度: O(n)


![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bbba759756b4dc48eeb90e67428f195~tplv-k3u1fbpfcp-watermark.image?)

# 3. 投票算法Boyer-Moore 
- 我们维护一个候选众数 `candidate` 和它出现的次数 `count`。初始时 `candidate` 可以为任意值，`count` 为 `0`
- 我们遍历数组 `nums` 中的所有元素，对于每个元素 `nums`，在判断 `x` 之前，如果 `count` 的值为 `0`，我们先将 `x` 的值赋予 `candidate`，随后我们判断 `x`：
    - 如果 `x` 与 `candidate` 相等，那么计数器 `count` 的值增加 `1`；
    - 如果 `x` 与 `candidate` 不等，那么计数器 `count` 的值减少 `1`。
-   因为题目假设**数组总是存在多数元素**，所以在遍历完成后，`candidate` 即为整个数组的众数。

```javascript
/**
 * @param {number[]} nums
 * @return {number}
 */
 var majorityElement = function(nums) {
  let count = 0, candidate
  for(let i in nums) {
    if(count === 0) {
      candidate = nums[i]
    }
    count =  (nums[i] === candidate) ? ++count : --count
  }
  return candidate
};
```
**复杂度分析**
- 时间复杂度： O(n)
- 空间复杂度： O(1)

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbe558f60bc14ac6b46867960f5fe0e8~tplv-k3u1fbpfcp-watermark.image?)

